//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace footbal.football {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://xmlsoccer.com/", ConfigurationName="football.FootballDataSoap")]
    public interface FootballDataSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetHistoricMatchesByTeamAndDateInterval", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetHistoricMatchesByTeamAndDateInterval(string ApiKey, string teamId, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetHistoricMatchesByTeamAndDateInterval(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/UpdateDynamicIp", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginUpdateDynamicIp(string ApiKey, string email, string newIp, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndUpdateDynamicIp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetFixturesByDateIntervalAndTeam", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFixturesByDateIntervalAndTeam(string ApiKey, string startDateString, string endDateString, string teamId, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetFixturesByDateIntervalAndTeam(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetFixturesByLeagueAndSeason", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFixturesByLeagueAndSeason(string ApiKey, string seasonDateString, string league, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetFixturesByLeagueAndSeason(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetHistoricMatchesByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetHistoricMatchesByID(string ApiKey, int Id, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetHistoricMatchesByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetHistoricMatchesByFixtureMatchID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetHistoricMatchesByFixtureMatchID(string ApiKey, int Id, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetHistoricMatchesByFixtureMatchID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetHistoricMatchesByLeagueAndDateInterval", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetHistoricMatchesByLeagueAndDateInterval(string ApiKey, string league, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetHistoricMatchesByLeagueAndDateInterval(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetHistoricMatchesByLeagueAndSeason", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetHistoricMatchesByLeagueAndSeason(string ApiKey, string league, string seasonDateString, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetHistoricMatchesByLeagueAndSeason(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetHistoricMatchesByTeamsAndDateInterval", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetHistoricMatchesByTeamsAndDateInterval(string ApiKey, string team1Id, string team2Id, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetHistoricMatchesByTeamsAndDateInterval(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetFixturesByDateInterval", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFixturesByDateInterval(string ApiKey, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetFixturesByDateInterval(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetFixturesByDateIntervalAndLeague", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFixturesByDateIntervalAndLeague(string league, string ApiKey, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetFixturesByDateIntervalAndLeague(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetAllTeams", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetAllTeams(string ApiKey, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetAllTeams(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetAllLeagues", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetAllLeagues(string ApiKey, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetAllLeagues(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetLeagueStandingsBySeason", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetLeagueStandingsBySeason(string ApiKey, string league, string seasonDateString, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetLeagueStandingsBySeason(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetAllTeamsByLeagueAndSeason", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetAllTeamsByLeagueAndSeason(string ApiKey, string league, string seasonDateString, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetAllTeamsByLeagueAndSeason(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetEarliestMatchDatePerLeague", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetEarliestMatchDatePerLeague(string ApiKey, string league, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetEarliestMatchDatePerLeague(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetLiveScore", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetLiveScore(string ApiKey, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetLiveScore(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetLiveScoreByLeague", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetLiveScoreByLeague(string ApiKey, string league, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetLiveScoreByLeague(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetTeam", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetTeam(string ApiKey, string teamName, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetTeam(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/GetOddsByFixtureMatchId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetOddsByFixtureMatchId(string ApiKey, string fixtureMatch_Id, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndGetOddsByFixtureMatchId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlsoccer.com/CheckApiKey", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginCheckApiKey(string ApiKey, System.AsyncCallback callback, object asyncState);
        
        string EndCheckApiKey(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FootballDataSoapChannel : footbal.football.FootballDataSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHistoricMatchesByTeamAndDateIntervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistoricMatchesByTeamAndDateIntervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateDynamicIpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateDynamicIpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFixturesByDateIntervalAndTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFixturesByDateIntervalAndTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFixturesByLeagueAndSeasonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFixturesByLeagueAndSeasonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHistoricMatchesByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistoricMatchesByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHistoricMatchesByFixtureMatchIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistoricMatchesByFixtureMatchIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHistoricMatchesByLeagueAndDateIntervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistoricMatchesByLeagueAndDateIntervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHistoricMatchesByLeagueAndSeasonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistoricMatchesByLeagueAndSeasonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHistoricMatchesByTeamsAndDateIntervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistoricMatchesByTeamsAndDateIntervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFixturesByDateIntervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFixturesByDateIntervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFixturesByDateIntervalAndLeagueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFixturesByDateIntervalAndLeagueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllTeamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllTeamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllLeaguesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllLeaguesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLeagueStandingsBySeasonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLeagueStandingsBySeasonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllTeamsByLeagueAndSeasonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllTeamsByLeagueAndSeasonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEarliestMatchDatePerLeagueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEarliestMatchDatePerLeagueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLiveScoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLiveScoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLiveScoreByLeagueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLiveScoreByLeagueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOddsByFixtureMatchIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOddsByFixtureMatchIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckApiKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckApiKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FootballDataSoapClient : System.ServiceModel.ClientBase<footbal.football.FootballDataSoap>, footbal.football.FootballDataSoap {
        
        private BeginOperationDelegate onBeginGetHistoricMatchesByTeamAndDateIntervalDelegate;
        
        private EndOperationDelegate onEndGetHistoricMatchesByTeamAndDateIntervalDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistoricMatchesByTeamAndDateIntervalCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDynamicIpDelegate;
        
        private EndOperationDelegate onEndUpdateDynamicIpDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateDynamicIpCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFixturesByDateIntervalAndTeamDelegate;
        
        private EndOperationDelegate onEndGetFixturesByDateIntervalAndTeamDelegate;
        
        private System.Threading.SendOrPostCallback onGetFixturesByDateIntervalAndTeamCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFixturesByLeagueAndSeasonDelegate;
        
        private EndOperationDelegate onEndGetFixturesByLeagueAndSeasonDelegate;
        
        private System.Threading.SendOrPostCallback onGetFixturesByLeagueAndSeasonCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistoricMatchesByIDDelegate;
        
        private EndOperationDelegate onEndGetHistoricMatchesByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistoricMatchesByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistoricMatchesByFixtureMatchIDDelegate;
        
        private EndOperationDelegate onEndGetHistoricMatchesByFixtureMatchIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistoricMatchesByFixtureMatchIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistoricMatchesByLeagueAndDateIntervalDelegate;
        
        private EndOperationDelegate onEndGetHistoricMatchesByLeagueAndDateIntervalDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistoricMatchesByLeagueAndDateIntervalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistoricMatchesByLeagueAndSeasonDelegate;
        
        private EndOperationDelegate onEndGetHistoricMatchesByLeagueAndSeasonDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistoricMatchesByLeagueAndSeasonCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistoricMatchesByTeamsAndDateIntervalDelegate;
        
        private EndOperationDelegate onEndGetHistoricMatchesByTeamsAndDateIntervalDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistoricMatchesByTeamsAndDateIntervalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFixturesByDateIntervalDelegate;
        
        private EndOperationDelegate onEndGetFixturesByDateIntervalDelegate;
        
        private System.Threading.SendOrPostCallback onGetFixturesByDateIntervalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFixturesByDateIntervalAndLeagueDelegate;
        
        private EndOperationDelegate onEndGetFixturesByDateIntervalAndLeagueDelegate;
        
        private System.Threading.SendOrPostCallback onGetFixturesByDateIntervalAndLeagueCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllTeamsDelegate;
        
        private EndOperationDelegate onEndGetAllTeamsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllTeamsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllLeaguesDelegate;
        
        private EndOperationDelegate onEndGetAllLeaguesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllLeaguesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLeagueStandingsBySeasonDelegate;
        
        private EndOperationDelegate onEndGetLeagueStandingsBySeasonDelegate;
        
        private System.Threading.SendOrPostCallback onGetLeagueStandingsBySeasonCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllTeamsByLeagueAndSeasonDelegate;
        
        private EndOperationDelegate onEndGetAllTeamsByLeagueAndSeasonDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllTeamsByLeagueAndSeasonCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEarliestMatchDatePerLeagueDelegate;
        
        private EndOperationDelegate onEndGetEarliestMatchDatePerLeagueDelegate;
        
        private System.Threading.SendOrPostCallback onGetEarliestMatchDatePerLeagueCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLiveScoreDelegate;
        
        private EndOperationDelegate onEndGetLiveScoreDelegate;
        
        private System.Threading.SendOrPostCallback onGetLiveScoreCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLiveScoreByLeagueDelegate;
        
        private EndOperationDelegate onEndGetLiveScoreByLeagueDelegate;
        
        private System.Threading.SendOrPostCallback onGetLiveScoreByLeagueCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTeamDelegate;
        
        private EndOperationDelegate onEndGetTeamDelegate;
        
        private System.Threading.SendOrPostCallback onGetTeamCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOddsByFixtureMatchIdDelegate;
        
        private EndOperationDelegate onEndGetOddsByFixtureMatchIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetOddsByFixtureMatchIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckApiKeyDelegate;
        
        private EndOperationDelegate onEndCheckApiKeyDelegate;
        
        private System.Threading.SendOrPostCallback onCheckApiKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FootballDataSoapClient() {
        }
        
        public FootballDataSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FootballDataSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FootballDataSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FootballDataSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetHistoricMatchesByTeamAndDateIntervalCompletedEventArgs> GetHistoricMatchesByTeamAndDateIntervalCompleted;
        
        public event System.EventHandler<UpdateDynamicIpCompletedEventArgs> UpdateDynamicIpCompleted;
        
        public event System.EventHandler<GetFixturesByDateIntervalAndTeamCompletedEventArgs> GetFixturesByDateIntervalAndTeamCompleted;
        
        public event System.EventHandler<GetFixturesByLeagueAndSeasonCompletedEventArgs> GetFixturesByLeagueAndSeasonCompleted;
        
        public event System.EventHandler<GetHistoricMatchesByIDCompletedEventArgs> GetHistoricMatchesByIDCompleted;
        
        public event System.EventHandler<GetHistoricMatchesByFixtureMatchIDCompletedEventArgs> GetHistoricMatchesByFixtureMatchIDCompleted;
        
        public event System.EventHandler<GetHistoricMatchesByLeagueAndDateIntervalCompletedEventArgs> GetHistoricMatchesByLeagueAndDateIntervalCompleted;
        
        public event System.EventHandler<GetHistoricMatchesByLeagueAndSeasonCompletedEventArgs> GetHistoricMatchesByLeagueAndSeasonCompleted;
        
        public event System.EventHandler<GetHistoricMatchesByTeamsAndDateIntervalCompletedEventArgs> GetHistoricMatchesByTeamsAndDateIntervalCompleted;
        
        public event System.EventHandler<GetFixturesByDateIntervalCompletedEventArgs> GetFixturesByDateIntervalCompleted;
        
        public event System.EventHandler<GetFixturesByDateIntervalAndLeagueCompletedEventArgs> GetFixturesByDateIntervalAndLeagueCompleted;
        
        public event System.EventHandler<GetAllTeamsCompletedEventArgs> GetAllTeamsCompleted;
        
        public event System.EventHandler<GetAllLeaguesCompletedEventArgs> GetAllLeaguesCompleted;
        
        public event System.EventHandler<GetLeagueStandingsBySeasonCompletedEventArgs> GetLeagueStandingsBySeasonCompleted;
        
        public event System.EventHandler<GetAllTeamsByLeagueAndSeasonCompletedEventArgs> GetAllTeamsByLeagueAndSeasonCompleted;
        
        public event System.EventHandler<GetEarliestMatchDatePerLeagueCompletedEventArgs> GetEarliestMatchDatePerLeagueCompleted;
        
        public event System.EventHandler<GetLiveScoreCompletedEventArgs> GetLiveScoreCompleted;
        
        public event System.EventHandler<GetLiveScoreByLeagueCompletedEventArgs> GetLiveScoreByLeagueCompleted;
        
        public event System.EventHandler<GetTeamCompletedEventArgs> GetTeamCompleted;
        
        public event System.EventHandler<GetOddsByFixtureMatchIdCompletedEventArgs> GetOddsByFixtureMatchIdCompleted;
        
        public event System.EventHandler<CheckApiKeyCompletedEventArgs> CheckApiKeyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetHistoricMatchesByTeamAndDateInterval(string ApiKey, string teamId, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistoricMatchesByTeamAndDateInterval(ApiKey, teamId, startDateString, endDateString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetHistoricMatchesByTeamAndDateInterval(System.IAsyncResult result) {
            return base.Channel.EndGetHistoricMatchesByTeamAndDateInterval(result);
        }
        
        private System.IAsyncResult OnBeginGetHistoricMatchesByTeamAndDateInterval(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string teamId = ((string)(inValues[1]));
            string startDateString = ((string)(inValues[2]));
            string endDateString = ((string)(inValues[3]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetHistoricMatchesByTeamAndDateInterval(ApiKey, teamId, startDateString, endDateString, callback, asyncState);
        }
        
        private object[] OnEndGetHistoricMatchesByTeamAndDateInterval(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetHistoricMatchesByTeamAndDateInterval(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistoricMatchesByTeamAndDateIntervalCompleted(object state) {
            if ((this.GetHistoricMatchesByTeamAndDateIntervalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistoricMatchesByTeamAndDateIntervalCompleted(this, new GetHistoricMatchesByTeamAndDateIntervalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistoricMatchesByTeamAndDateIntervalAsync(string ApiKey, string teamId, string startDateString, string endDateString) {
            this.GetHistoricMatchesByTeamAndDateIntervalAsync(ApiKey, teamId, startDateString, endDateString, null);
        }
        
        public void GetHistoricMatchesByTeamAndDateIntervalAsync(string ApiKey, string teamId, string startDateString, string endDateString, object userState) {
            if ((this.onBeginGetHistoricMatchesByTeamAndDateIntervalDelegate == null)) {
                this.onBeginGetHistoricMatchesByTeamAndDateIntervalDelegate = new BeginOperationDelegate(this.OnBeginGetHistoricMatchesByTeamAndDateInterval);
            }
            if ((this.onEndGetHistoricMatchesByTeamAndDateIntervalDelegate == null)) {
                this.onEndGetHistoricMatchesByTeamAndDateIntervalDelegate = new EndOperationDelegate(this.OnEndGetHistoricMatchesByTeamAndDateInterval);
            }
            if ((this.onGetHistoricMatchesByTeamAndDateIntervalCompletedDelegate == null)) {
                this.onGetHistoricMatchesByTeamAndDateIntervalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistoricMatchesByTeamAndDateIntervalCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistoricMatchesByTeamAndDateIntervalDelegate, new object[] {
                        ApiKey,
                        teamId,
                        startDateString,
                        endDateString}, this.onEndGetHistoricMatchesByTeamAndDateIntervalDelegate, this.onGetHistoricMatchesByTeamAndDateIntervalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginUpdateDynamicIp(string ApiKey, string email, string newIp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateDynamicIp(ApiKey, email, newIp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndUpdateDynamicIp(System.IAsyncResult result) {
            return base.Channel.EndUpdateDynamicIp(result);
        }
        
        private System.IAsyncResult OnBeginUpdateDynamicIp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string email = ((string)(inValues[1]));
            string newIp = ((string)(inValues[2]));
            return ((footbal.football.FootballDataSoap)(this)).BeginUpdateDynamicIp(ApiKey, email, newIp, callback, asyncState);
        }
        
        private object[] OnEndUpdateDynamicIp(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndUpdateDynamicIp(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateDynamicIpCompleted(object state) {
            if ((this.UpdateDynamicIpCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateDynamicIpCompleted(this, new UpdateDynamicIpCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateDynamicIpAsync(string ApiKey, string email, string newIp) {
            this.UpdateDynamicIpAsync(ApiKey, email, newIp, null);
        }
        
        public void UpdateDynamicIpAsync(string ApiKey, string email, string newIp, object userState) {
            if ((this.onBeginUpdateDynamicIpDelegate == null)) {
                this.onBeginUpdateDynamicIpDelegate = new BeginOperationDelegate(this.OnBeginUpdateDynamicIp);
            }
            if ((this.onEndUpdateDynamicIpDelegate == null)) {
                this.onEndUpdateDynamicIpDelegate = new EndOperationDelegate(this.OnEndUpdateDynamicIp);
            }
            if ((this.onUpdateDynamicIpCompletedDelegate == null)) {
                this.onUpdateDynamicIpCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateDynamicIpCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDynamicIpDelegate, new object[] {
                        ApiKey,
                        email,
                        newIp}, this.onEndUpdateDynamicIpDelegate, this.onUpdateDynamicIpCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetFixturesByDateIntervalAndTeam(string ApiKey, string startDateString, string endDateString, string teamId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFixturesByDateIntervalAndTeam(ApiKey, startDateString, endDateString, teamId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetFixturesByDateIntervalAndTeam(System.IAsyncResult result) {
            return base.Channel.EndGetFixturesByDateIntervalAndTeam(result);
        }
        
        private System.IAsyncResult OnBeginGetFixturesByDateIntervalAndTeam(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string startDateString = ((string)(inValues[1]));
            string endDateString = ((string)(inValues[2]));
            string teamId = ((string)(inValues[3]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetFixturesByDateIntervalAndTeam(ApiKey, startDateString, endDateString, teamId, callback, asyncState);
        }
        
        private object[] OnEndGetFixturesByDateIntervalAndTeam(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetFixturesByDateIntervalAndTeam(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFixturesByDateIntervalAndTeamCompleted(object state) {
            if ((this.GetFixturesByDateIntervalAndTeamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFixturesByDateIntervalAndTeamCompleted(this, new GetFixturesByDateIntervalAndTeamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFixturesByDateIntervalAndTeamAsync(string ApiKey, string startDateString, string endDateString, string teamId) {
            this.GetFixturesByDateIntervalAndTeamAsync(ApiKey, startDateString, endDateString, teamId, null);
        }
        
        public void GetFixturesByDateIntervalAndTeamAsync(string ApiKey, string startDateString, string endDateString, string teamId, object userState) {
            if ((this.onBeginGetFixturesByDateIntervalAndTeamDelegate == null)) {
                this.onBeginGetFixturesByDateIntervalAndTeamDelegate = new BeginOperationDelegate(this.OnBeginGetFixturesByDateIntervalAndTeam);
            }
            if ((this.onEndGetFixturesByDateIntervalAndTeamDelegate == null)) {
                this.onEndGetFixturesByDateIntervalAndTeamDelegate = new EndOperationDelegate(this.OnEndGetFixturesByDateIntervalAndTeam);
            }
            if ((this.onGetFixturesByDateIntervalAndTeamCompletedDelegate == null)) {
                this.onGetFixturesByDateIntervalAndTeamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFixturesByDateIntervalAndTeamCompleted);
            }
            base.InvokeAsync(this.onBeginGetFixturesByDateIntervalAndTeamDelegate, new object[] {
                        ApiKey,
                        startDateString,
                        endDateString,
                        teamId}, this.onEndGetFixturesByDateIntervalAndTeamDelegate, this.onGetFixturesByDateIntervalAndTeamCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetFixturesByLeagueAndSeason(string ApiKey, string seasonDateString, string league, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFixturesByLeagueAndSeason(ApiKey, seasonDateString, league, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetFixturesByLeagueAndSeason(System.IAsyncResult result) {
            return base.Channel.EndGetFixturesByLeagueAndSeason(result);
        }
        
        private System.IAsyncResult OnBeginGetFixturesByLeagueAndSeason(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string seasonDateString = ((string)(inValues[1]));
            string league = ((string)(inValues[2]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetFixturesByLeagueAndSeason(ApiKey, seasonDateString, league, callback, asyncState);
        }
        
        private object[] OnEndGetFixturesByLeagueAndSeason(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetFixturesByLeagueAndSeason(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFixturesByLeagueAndSeasonCompleted(object state) {
            if ((this.GetFixturesByLeagueAndSeasonCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFixturesByLeagueAndSeasonCompleted(this, new GetFixturesByLeagueAndSeasonCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFixturesByLeagueAndSeasonAsync(string ApiKey, string seasonDateString, string league) {
            this.GetFixturesByLeagueAndSeasonAsync(ApiKey, seasonDateString, league, null);
        }
        
        public void GetFixturesByLeagueAndSeasonAsync(string ApiKey, string seasonDateString, string league, object userState) {
            if ((this.onBeginGetFixturesByLeagueAndSeasonDelegate == null)) {
                this.onBeginGetFixturesByLeagueAndSeasonDelegate = new BeginOperationDelegate(this.OnBeginGetFixturesByLeagueAndSeason);
            }
            if ((this.onEndGetFixturesByLeagueAndSeasonDelegate == null)) {
                this.onEndGetFixturesByLeagueAndSeasonDelegate = new EndOperationDelegate(this.OnEndGetFixturesByLeagueAndSeason);
            }
            if ((this.onGetFixturesByLeagueAndSeasonCompletedDelegate == null)) {
                this.onGetFixturesByLeagueAndSeasonCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFixturesByLeagueAndSeasonCompleted);
            }
            base.InvokeAsync(this.onBeginGetFixturesByLeagueAndSeasonDelegate, new object[] {
                        ApiKey,
                        seasonDateString,
                        league}, this.onEndGetFixturesByLeagueAndSeasonDelegate, this.onGetFixturesByLeagueAndSeasonCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetHistoricMatchesByID(string ApiKey, int Id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistoricMatchesByID(ApiKey, Id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetHistoricMatchesByID(System.IAsyncResult result) {
            return base.Channel.EndGetHistoricMatchesByID(result);
        }
        
        private System.IAsyncResult OnBeginGetHistoricMatchesByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            int Id = ((int)(inValues[1]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetHistoricMatchesByID(ApiKey, Id, callback, asyncState);
        }
        
        private object[] OnEndGetHistoricMatchesByID(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetHistoricMatchesByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistoricMatchesByIDCompleted(object state) {
            if ((this.GetHistoricMatchesByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistoricMatchesByIDCompleted(this, new GetHistoricMatchesByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistoricMatchesByIDAsync(string ApiKey, int Id) {
            this.GetHistoricMatchesByIDAsync(ApiKey, Id, null);
        }
        
        public void GetHistoricMatchesByIDAsync(string ApiKey, int Id, object userState) {
            if ((this.onBeginGetHistoricMatchesByIDDelegate == null)) {
                this.onBeginGetHistoricMatchesByIDDelegate = new BeginOperationDelegate(this.OnBeginGetHistoricMatchesByID);
            }
            if ((this.onEndGetHistoricMatchesByIDDelegate == null)) {
                this.onEndGetHistoricMatchesByIDDelegate = new EndOperationDelegate(this.OnEndGetHistoricMatchesByID);
            }
            if ((this.onGetHistoricMatchesByIDCompletedDelegate == null)) {
                this.onGetHistoricMatchesByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistoricMatchesByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistoricMatchesByIDDelegate, new object[] {
                        ApiKey,
                        Id}, this.onEndGetHistoricMatchesByIDDelegate, this.onGetHistoricMatchesByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetHistoricMatchesByFixtureMatchID(string ApiKey, int Id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistoricMatchesByFixtureMatchID(ApiKey, Id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetHistoricMatchesByFixtureMatchID(System.IAsyncResult result) {
            return base.Channel.EndGetHistoricMatchesByFixtureMatchID(result);
        }
        
        private System.IAsyncResult OnBeginGetHistoricMatchesByFixtureMatchID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            int Id = ((int)(inValues[1]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetHistoricMatchesByFixtureMatchID(ApiKey, Id, callback, asyncState);
        }
        
        private object[] OnEndGetHistoricMatchesByFixtureMatchID(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetHistoricMatchesByFixtureMatchID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistoricMatchesByFixtureMatchIDCompleted(object state) {
            if ((this.GetHistoricMatchesByFixtureMatchIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistoricMatchesByFixtureMatchIDCompleted(this, new GetHistoricMatchesByFixtureMatchIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistoricMatchesByFixtureMatchIDAsync(string ApiKey, int Id) {
            this.GetHistoricMatchesByFixtureMatchIDAsync(ApiKey, Id, null);
        }
        
        public void GetHistoricMatchesByFixtureMatchIDAsync(string ApiKey, int Id, object userState) {
            if ((this.onBeginGetHistoricMatchesByFixtureMatchIDDelegate == null)) {
                this.onBeginGetHistoricMatchesByFixtureMatchIDDelegate = new BeginOperationDelegate(this.OnBeginGetHistoricMatchesByFixtureMatchID);
            }
            if ((this.onEndGetHistoricMatchesByFixtureMatchIDDelegate == null)) {
                this.onEndGetHistoricMatchesByFixtureMatchIDDelegate = new EndOperationDelegate(this.OnEndGetHistoricMatchesByFixtureMatchID);
            }
            if ((this.onGetHistoricMatchesByFixtureMatchIDCompletedDelegate == null)) {
                this.onGetHistoricMatchesByFixtureMatchIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistoricMatchesByFixtureMatchIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistoricMatchesByFixtureMatchIDDelegate, new object[] {
                        ApiKey,
                        Id}, this.onEndGetHistoricMatchesByFixtureMatchIDDelegate, this.onGetHistoricMatchesByFixtureMatchIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetHistoricMatchesByLeagueAndDateInterval(string ApiKey, string league, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistoricMatchesByLeagueAndDateInterval(ApiKey, league, startDateString, endDateString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetHistoricMatchesByLeagueAndDateInterval(System.IAsyncResult result) {
            return base.Channel.EndGetHistoricMatchesByLeagueAndDateInterval(result);
        }
        
        private System.IAsyncResult OnBeginGetHistoricMatchesByLeagueAndDateInterval(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string league = ((string)(inValues[1]));
            string startDateString = ((string)(inValues[2]));
            string endDateString = ((string)(inValues[3]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetHistoricMatchesByLeagueAndDateInterval(ApiKey, league, startDateString, endDateString, callback, asyncState);
        }
        
        private object[] OnEndGetHistoricMatchesByLeagueAndDateInterval(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetHistoricMatchesByLeagueAndDateInterval(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistoricMatchesByLeagueAndDateIntervalCompleted(object state) {
            if ((this.GetHistoricMatchesByLeagueAndDateIntervalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistoricMatchesByLeagueAndDateIntervalCompleted(this, new GetHistoricMatchesByLeagueAndDateIntervalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistoricMatchesByLeagueAndDateIntervalAsync(string ApiKey, string league, string startDateString, string endDateString) {
            this.GetHistoricMatchesByLeagueAndDateIntervalAsync(ApiKey, league, startDateString, endDateString, null);
        }
        
        public void GetHistoricMatchesByLeagueAndDateIntervalAsync(string ApiKey, string league, string startDateString, string endDateString, object userState) {
            if ((this.onBeginGetHistoricMatchesByLeagueAndDateIntervalDelegate == null)) {
                this.onBeginGetHistoricMatchesByLeagueAndDateIntervalDelegate = new BeginOperationDelegate(this.OnBeginGetHistoricMatchesByLeagueAndDateInterval);
            }
            if ((this.onEndGetHistoricMatchesByLeagueAndDateIntervalDelegate == null)) {
                this.onEndGetHistoricMatchesByLeagueAndDateIntervalDelegate = new EndOperationDelegate(this.OnEndGetHistoricMatchesByLeagueAndDateInterval);
            }
            if ((this.onGetHistoricMatchesByLeagueAndDateIntervalCompletedDelegate == null)) {
                this.onGetHistoricMatchesByLeagueAndDateIntervalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistoricMatchesByLeagueAndDateIntervalCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistoricMatchesByLeagueAndDateIntervalDelegate, new object[] {
                        ApiKey,
                        league,
                        startDateString,
                        endDateString}, this.onEndGetHistoricMatchesByLeagueAndDateIntervalDelegate, this.onGetHistoricMatchesByLeagueAndDateIntervalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetHistoricMatchesByLeagueAndSeason(string ApiKey, string league, string seasonDateString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistoricMatchesByLeagueAndSeason(ApiKey, league, seasonDateString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetHistoricMatchesByLeagueAndSeason(System.IAsyncResult result) {
            return base.Channel.EndGetHistoricMatchesByLeagueAndSeason(result);
        }
        
        private System.IAsyncResult OnBeginGetHistoricMatchesByLeagueAndSeason(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string league = ((string)(inValues[1]));
            string seasonDateString = ((string)(inValues[2]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetHistoricMatchesByLeagueAndSeason(ApiKey, league, seasonDateString, callback, asyncState);
        }
        
        private object[] OnEndGetHistoricMatchesByLeagueAndSeason(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetHistoricMatchesByLeagueAndSeason(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistoricMatchesByLeagueAndSeasonCompleted(object state) {
            if ((this.GetHistoricMatchesByLeagueAndSeasonCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistoricMatchesByLeagueAndSeasonCompleted(this, new GetHistoricMatchesByLeagueAndSeasonCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistoricMatchesByLeagueAndSeasonAsync(string ApiKey, string league, string seasonDateString) {
            this.GetHistoricMatchesByLeagueAndSeasonAsync(ApiKey, league, seasonDateString, null);
        }
        
        public void GetHistoricMatchesByLeagueAndSeasonAsync(string ApiKey, string league, string seasonDateString, object userState) {
            if ((this.onBeginGetHistoricMatchesByLeagueAndSeasonDelegate == null)) {
                this.onBeginGetHistoricMatchesByLeagueAndSeasonDelegate = new BeginOperationDelegate(this.OnBeginGetHistoricMatchesByLeagueAndSeason);
            }
            if ((this.onEndGetHistoricMatchesByLeagueAndSeasonDelegate == null)) {
                this.onEndGetHistoricMatchesByLeagueAndSeasonDelegate = new EndOperationDelegate(this.OnEndGetHistoricMatchesByLeagueAndSeason);
            }
            if ((this.onGetHistoricMatchesByLeagueAndSeasonCompletedDelegate == null)) {
                this.onGetHistoricMatchesByLeagueAndSeasonCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistoricMatchesByLeagueAndSeasonCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistoricMatchesByLeagueAndSeasonDelegate, new object[] {
                        ApiKey,
                        league,
                        seasonDateString}, this.onEndGetHistoricMatchesByLeagueAndSeasonDelegate, this.onGetHistoricMatchesByLeagueAndSeasonCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetHistoricMatchesByTeamsAndDateInterval(string ApiKey, string team1Id, string team2Id, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistoricMatchesByTeamsAndDateInterval(ApiKey, team1Id, team2Id, startDateString, endDateString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetHistoricMatchesByTeamsAndDateInterval(System.IAsyncResult result) {
            return base.Channel.EndGetHistoricMatchesByTeamsAndDateInterval(result);
        }
        
        private System.IAsyncResult OnBeginGetHistoricMatchesByTeamsAndDateInterval(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string team1Id = ((string)(inValues[1]));
            string team2Id = ((string)(inValues[2]));
            string startDateString = ((string)(inValues[3]));
            string endDateString = ((string)(inValues[4]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetHistoricMatchesByTeamsAndDateInterval(ApiKey, team1Id, team2Id, startDateString, endDateString, callback, asyncState);
        }
        
        private object[] OnEndGetHistoricMatchesByTeamsAndDateInterval(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetHistoricMatchesByTeamsAndDateInterval(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistoricMatchesByTeamsAndDateIntervalCompleted(object state) {
            if ((this.GetHistoricMatchesByTeamsAndDateIntervalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistoricMatchesByTeamsAndDateIntervalCompleted(this, new GetHistoricMatchesByTeamsAndDateIntervalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistoricMatchesByTeamsAndDateIntervalAsync(string ApiKey, string team1Id, string team2Id, string startDateString, string endDateString) {
            this.GetHistoricMatchesByTeamsAndDateIntervalAsync(ApiKey, team1Id, team2Id, startDateString, endDateString, null);
        }
        
        public void GetHistoricMatchesByTeamsAndDateIntervalAsync(string ApiKey, string team1Id, string team2Id, string startDateString, string endDateString, object userState) {
            if ((this.onBeginGetHistoricMatchesByTeamsAndDateIntervalDelegate == null)) {
                this.onBeginGetHistoricMatchesByTeamsAndDateIntervalDelegate = new BeginOperationDelegate(this.OnBeginGetHistoricMatchesByTeamsAndDateInterval);
            }
            if ((this.onEndGetHistoricMatchesByTeamsAndDateIntervalDelegate == null)) {
                this.onEndGetHistoricMatchesByTeamsAndDateIntervalDelegate = new EndOperationDelegate(this.OnEndGetHistoricMatchesByTeamsAndDateInterval);
            }
            if ((this.onGetHistoricMatchesByTeamsAndDateIntervalCompletedDelegate == null)) {
                this.onGetHistoricMatchesByTeamsAndDateIntervalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistoricMatchesByTeamsAndDateIntervalCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistoricMatchesByTeamsAndDateIntervalDelegate, new object[] {
                        ApiKey,
                        team1Id,
                        team2Id,
                        startDateString,
                        endDateString}, this.onEndGetHistoricMatchesByTeamsAndDateIntervalDelegate, this.onGetHistoricMatchesByTeamsAndDateIntervalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetFixturesByDateInterval(string ApiKey, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFixturesByDateInterval(ApiKey, startDateString, endDateString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetFixturesByDateInterval(System.IAsyncResult result) {
            return base.Channel.EndGetFixturesByDateInterval(result);
        }
        
        private System.IAsyncResult OnBeginGetFixturesByDateInterval(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string startDateString = ((string)(inValues[1]));
            string endDateString = ((string)(inValues[2]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetFixturesByDateInterval(ApiKey, startDateString, endDateString, callback, asyncState);
        }
        
        private object[] OnEndGetFixturesByDateInterval(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetFixturesByDateInterval(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFixturesByDateIntervalCompleted(object state) {
            if ((this.GetFixturesByDateIntervalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFixturesByDateIntervalCompleted(this, new GetFixturesByDateIntervalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFixturesByDateIntervalAsync(string ApiKey, string startDateString, string endDateString) {
            this.GetFixturesByDateIntervalAsync(ApiKey, startDateString, endDateString, null);
        }
        
        public void GetFixturesByDateIntervalAsync(string ApiKey, string startDateString, string endDateString, object userState) {
            if ((this.onBeginGetFixturesByDateIntervalDelegate == null)) {
                this.onBeginGetFixturesByDateIntervalDelegate = new BeginOperationDelegate(this.OnBeginGetFixturesByDateInterval);
            }
            if ((this.onEndGetFixturesByDateIntervalDelegate == null)) {
                this.onEndGetFixturesByDateIntervalDelegate = new EndOperationDelegate(this.OnEndGetFixturesByDateInterval);
            }
            if ((this.onGetFixturesByDateIntervalCompletedDelegate == null)) {
                this.onGetFixturesByDateIntervalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFixturesByDateIntervalCompleted);
            }
            base.InvokeAsync(this.onBeginGetFixturesByDateIntervalDelegate, new object[] {
                        ApiKey,
                        startDateString,
                        endDateString}, this.onEndGetFixturesByDateIntervalDelegate, this.onGetFixturesByDateIntervalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetFixturesByDateIntervalAndLeague(string league, string ApiKey, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFixturesByDateIntervalAndLeague(league, ApiKey, startDateString, endDateString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetFixturesByDateIntervalAndLeague(System.IAsyncResult result) {
            return base.Channel.EndGetFixturesByDateIntervalAndLeague(result);
        }
        
        private System.IAsyncResult OnBeginGetFixturesByDateIntervalAndLeague(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string league = ((string)(inValues[0]));
            string ApiKey = ((string)(inValues[1]));
            string startDateString = ((string)(inValues[2]));
            string endDateString = ((string)(inValues[3]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetFixturesByDateIntervalAndLeague(league, ApiKey, startDateString, endDateString, callback, asyncState);
        }
        
        private object[] OnEndGetFixturesByDateIntervalAndLeague(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetFixturesByDateIntervalAndLeague(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFixturesByDateIntervalAndLeagueCompleted(object state) {
            if ((this.GetFixturesByDateIntervalAndLeagueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFixturesByDateIntervalAndLeagueCompleted(this, new GetFixturesByDateIntervalAndLeagueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFixturesByDateIntervalAndLeagueAsync(string league, string ApiKey, string startDateString, string endDateString) {
            this.GetFixturesByDateIntervalAndLeagueAsync(league, ApiKey, startDateString, endDateString, null);
        }
        
        public void GetFixturesByDateIntervalAndLeagueAsync(string league, string ApiKey, string startDateString, string endDateString, object userState) {
            if ((this.onBeginGetFixturesByDateIntervalAndLeagueDelegate == null)) {
                this.onBeginGetFixturesByDateIntervalAndLeagueDelegate = new BeginOperationDelegate(this.OnBeginGetFixturesByDateIntervalAndLeague);
            }
            if ((this.onEndGetFixturesByDateIntervalAndLeagueDelegate == null)) {
                this.onEndGetFixturesByDateIntervalAndLeagueDelegate = new EndOperationDelegate(this.OnEndGetFixturesByDateIntervalAndLeague);
            }
            if ((this.onGetFixturesByDateIntervalAndLeagueCompletedDelegate == null)) {
                this.onGetFixturesByDateIntervalAndLeagueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFixturesByDateIntervalAndLeagueCompleted);
            }
            base.InvokeAsync(this.onBeginGetFixturesByDateIntervalAndLeagueDelegate, new object[] {
                        league,
                        ApiKey,
                        startDateString,
                        endDateString}, this.onEndGetFixturesByDateIntervalAndLeagueDelegate, this.onGetFixturesByDateIntervalAndLeagueCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetAllTeams(string ApiKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllTeams(ApiKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetAllTeams(System.IAsyncResult result) {
            return base.Channel.EndGetAllTeams(result);
        }
        
        private System.IAsyncResult OnBeginGetAllTeams(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetAllTeams(ApiKey, callback, asyncState);
        }
        
        private object[] OnEndGetAllTeams(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetAllTeams(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllTeamsCompleted(object state) {
            if ((this.GetAllTeamsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllTeamsCompleted(this, new GetAllTeamsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllTeamsAsync(string ApiKey) {
            this.GetAllTeamsAsync(ApiKey, null);
        }
        
        public void GetAllTeamsAsync(string ApiKey, object userState) {
            if ((this.onBeginGetAllTeamsDelegate == null)) {
                this.onBeginGetAllTeamsDelegate = new BeginOperationDelegate(this.OnBeginGetAllTeams);
            }
            if ((this.onEndGetAllTeamsDelegate == null)) {
                this.onEndGetAllTeamsDelegate = new EndOperationDelegate(this.OnEndGetAllTeams);
            }
            if ((this.onGetAllTeamsCompletedDelegate == null)) {
                this.onGetAllTeamsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllTeamsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllTeamsDelegate, new object[] {
                        ApiKey}, this.onEndGetAllTeamsDelegate, this.onGetAllTeamsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetAllLeagues(string ApiKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllLeagues(ApiKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetAllLeagues(System.IAsyncResult result) {
            return base.Channel.EndGetAllLeagues(result);
        }
        
        private System.IAsyncResult OnBeginGetAllLeagues(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetAllLeagues(ApiKey, callback, asyncState);
        }
        
        private object[] OnEndGetAllLeagues(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetAllLeagues(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllLeaguesCompleted(object state) {
            if ((this.GetAllLeaguesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllLeaguesCompleted(this, new GetAllLeaguesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllLeaguesAsync(string ApiKey) {
            this.GetAllLeaguesAsync(ApiKey, null);
        }
        
        public void GetAllLeaguesAsync(string ApiKey, object userState) {
            if ((this.onBeginGetAllLeaguesDelegate == null)) {
                this.onBeginGetAllLeaguesDelegate = new BeginOperationDelegate(this.OnBeginGetAllLeagues);
            }
            if ((this.onEndGetAllLeaguesDelegate == null)) {
                this.onEndGetAllLeaguesDelegate = new EndOperationDelegate(this.OnEndGetAllLeagues);
            }
            if ((this.onGetAllLeaguesCompletedDelegate == null)) {
                this.onGetAllLeaguesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllLeaguesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllLeaguesDelegate, new object[] {
                        ApiKey}, this.onEndGetAllLeaguesDelegate, this.onGetAllLeaguesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetLeagueStandingsBySeason(string ApiKey, string league, string seasonDateString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLeagueStandingsBySeason(ApiKey, league, seasonDateString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetLeagueStandingsBySeason(System.IAsyncResult result) {
            return base.Channel.EndGetLeagueStandingsBySeason(result);
        }
        
        private System.IAsyncResult OnBeginGetLeagueStandingsBySeason(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string league = ((string)(inValues[1]));
            string seasonDateString = ((string)(inValues[2]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetLeagueStandingsBySeason(ApiKey, league, seasonDateString, callback, asyncState);
        }
        
        private object[] OnEndGetLeagueStandingsBySeason(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetLeagueStandingsBySeason(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLeagueStandingsBySeasonCompleted(object state) {
            if ((this.GetLeagueStandingsBySeasonCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLeagueStandingsBySeasonCompleted(this, new GetLeagueStandingsBySeasonCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLeagueStandingsBySeasonAsync(string ApiKey, string league, string seasonDateString) {
            this.GetLeagueStandingsBySeasonAsync(ApiKey, league, seasonDateString, null);
        }
        
        public void GetLeagueStandingsBySeasonAsync(string ApiKey, string league, string seasonDateString, object userState) {
            if ((this.onBeginGetLeagueStandingsBySeasonDelegate == null)) {
                this.onBeginGetLeagueStandingsBySeasonDelegate = new BeginOperationDelegate(this.OnBeginGetLeagueStandingsBySeason);
            }
            if ((this.onEndGetLeagueStandingsBySeasonDelegate == null)) {
                this.onEndGetLeagueStandingsBySeasonDelegate = new EndOperationDelegate(this.OnEndGetLeagueStandingsBySeason);
            }
            if ((this.onGetLeagueStandingsBySeasonCompletedDelegate == null)) {
                this.onGetLeagueStandingsBySeasonCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLeagueStandingsBySeasonCompleted);
            }
            base.InvokeAsync(this.onBeginGetLeagueStandingsBySeasonDelegate, new object[] {
                        ApiKey,
                        league,
                        seasonDateString}, this.onEndGetLeagueStandingsBySeasonDelegate, this.onGetLeagueStandingsBySeasonCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetAllTeamsByLeagueAndSeason(string ApiKey, string league, string seasonDateString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllTeamsByLeagueAndSeason(ApiKey, league, seasonDateString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetAllTeamsByLeagueAndSeason(System.IAsyncResult result) {
            return base.Channel.EndGetAllTeamsByLeagueAndSeason(result);
        }
        
        private System.IAsyncResult OnBeginGetAllTeamsByLeagueAndSeason(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string league = ((string)(inValues[1]));
            string seasonDateString = ((string)(inValues[2]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetAllTeamsByLeagueAndSeason(ApiKey, league, seasonDateString, callback, asyncState);
        }
        
        private object[] OnEndGetAllTeamsByLeagueAndSeason(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetAllTeamsByLeagueAndSeason(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllTeamsByLeagueAndSeasonCompleted(object state) {
            if ((this.GetAllTeamsByLeagueAndSeasonCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllTeamsByLeagueAndSeasonCompleted(this, new GetAllTeamsByLeagueAndSeasonCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllTeamsByLeagueAndSeasonAsync(string ApiKey, string league, string seasonDateString) {
            this.GetAllTeamsByLeagueAndSeasonAsync(ApiKey, league, seasonDateString, null);
        }
        
        public void GetAllTeamsByLeagueAndSeasonAsync(string ApiKey, string league, string seasonDateString, object userState) {
            if ((this.onBeginGetAllTeamsByLeagueAndSeasonDelegate == null)) {
                this.onBeginGetAllTeamsByLeagueAndSeasonDelegate = new BeginOperationDelegate(this.OnBeginGetAllTeamsByLeagueAndSeason);
            }
            if ((this.onEndGetAllTeamsByLeagueAndSeasonDelegate == null)) {
                this.onEndGetAllTeamsByLeagueAndSeasonDelegate = new EndOperationDelegate(this.OnEndGetAllTeamsByLeagueAndSeason);
            }
            if ((this.onGetAllTeamsByLeagueAndSeasonCompletedDelegate == null)) {
                this.onGetAllTeamsByLeagueAndSeasonCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllTeamsByLeagueAndSeasonCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllTeamsByLeagueAndSeasonDelegate, new object[] {
                        ApiKey,
                        league,
                        seasonDateString}, this.onEndGetAllTeamsByLeagueAndSeasonDelegate, this.onGetAllTeamsByLeagueAndSeasonCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetEarliestMatchDatePerLeague(string ApiKey, string league, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEarliestMatchDatePerLeague(ApiKey, league, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetEarliestMatchDatePerLeague(System.IAsyncResult result) {
            return base.Channel.EndGetEarliestMatchDatePerLeague(result);
        }
        
        private System.IAsyncResult OnBeginGetEarliestMatchDatePerLeague(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string league = ((string)(inValues[1]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetEarliestMatchDatePerLeague(ApiKey, league, callback, asyncState);
        }
        
        private object[] OnEndGetEarliestMatchDatePerLeague(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetEarliestMatchDatePerLeague(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEarliestMatchDatePerLeagueCompleted(object state) {
            if ((this.GetEarliestMatchDatePerLeagueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEarliestMatchDatePerLeagueCompleted(this, new GetEarliestMatchDatePerLeagueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEarliestMatchDatePerLeagueAsync(string ApiKey, string league) {
            this.GetEarliestMatchDatePerLeagueAsync(ApiKey, league, null);
        }
        
        public void GetEarliestMatchDatePerLeagueAsync(string ApiKey, string league, object userState) {
            if ((this.onBeginGetEarliestMatchDatePerLeagueDelegate == null)) {
                this.onBeginGetEarliestMatchDatePerLeagueDelegate = new BeginOperationDelegate(this.OnBeginGetEarliestMatchDatePerLeague);
            }
            if ((this.onEndGetEarliestMatchDatePerLeagueDelegate == null)) {
                this.onEndGetEarliestMatchDatePerLeagueDelegate = new EndOperationDelegate(this.OnEndGetEarliestMatchDatePerLeague);
            }
            if ((this.onGetEarliestMatchDatePerLeagueCompletedDelegate == null)) {
                this.onGetEarliestMatchDatePerLeagueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEarliestMatchDatePerLeagueCompleted);
            }
            base.InvokeAsync(this.onBeginGetEarliestMatchDatePerLeagueDelegate, new object[] {
                        ApiKey,
                        league}, this.onEndGetEarliestMatchDatePerLeagueDelegate, this.onGetEarliestMatchDatePerLeagueCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetLiveScore(string ApiKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLiveScore(ApiKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetLiveScore(System.IAsyncResult result) {
            return base.Channel.EndGetLiveScore(result);
        }
        
        private System.IAsyncResult OnBeginGetLiveScore(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetLiveScore(ApiKey, callback, asyncState);
        }
        
        private object[] OnEndGetLiveScore(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetLiveScore(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLiveScoreCompleted(object state) {
            if ((this.GetLiveScoreCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLiveScoreCompleted(this, new GetLiveScoreCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLiveScoreAsync(string ApiKey) {
            this.GetLiveScoreAsync(ApiKey, null);
        }
        
        public void GetLiveScoreAsync(string ApiKey, object userState) {
            if ((this.onBeginGetLiveScoreDelegate == null)) {
                this.onBeginGetLiveScoreDelegate = new BeginOperationDelegate(this.OnBeginGetLiveScore);
            }
            if ((this.onEndGetLiveScoreDelegate == null)) {
                this.onEndGetLiveScoreDelegate = new EndOperationDelegate(this.OnEndGetLiveScore);
            }
            if ((this.onGetLiveScoreCompletedDelegate == null)) {
                this.onGetLiveScoreCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLiveScoreCompleted);
            }
            base.InvokeAsync(this.onBeginGetLiveScoreDelegate, new object[] {
                        ApiKey}, this.onEndGetLiveScoreDelegate, this.onGetLiveScoreCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetLiveScoreByLeague(string ApiKey, string league, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLiveScoreByLeague(ApiKey, league, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetLiveScoreByLeague(System.IAsyncResult result) {
            return base.Channel.EndGetLiveScoreByLeague(result);
        }
        
        private System.IAsyncResult OnBeginGetLiveScoreByLeague(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string league = ((string)(inValues[1]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetLiveScoreByLeague(ApiKey, league, callback, asyncState);
        }
        
        private object[] OnEndGetLiveScoreByLeague(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetLiveScoreByLeague(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLiveScoreByLeagueCompleted(object state) {
            if ((this.GetLiveScoreByLeagueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLiveScoreByLeagueCompleted(this, new GetLiveScoreByLeagueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLiveScoreByLeagueAsync(string ApiKey, string league) {
            this.GetLiveScoreByLeagueAsync(ApiKey, league, null);
        }
        
        public void GetLiveScoreByLeagueAsync(string ApiKey, string league, object userState) {
            if ((this.onBeginGetLiveScoreByLeagueDelegate == null)) {
                this.onBeginGetLiveScoreByLeagueDelegate = new BeginOperationDelegate(this.OnBeginGetLiveScoreByLeague);
            }
            if ((this.onEndGetLiveScoreByLeagueDelegate == null)) {
                this.onEndGetLiveScoreByLeagueDelegate = new EndOperationDelegate(this.OnEndGetLiveScoreByLeague);
            }
            if ((this.onGetLiveScoreByLeagueCompletedDelegate == null)) {
                this.onGetLiveScoreByLeagueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLiveScoreByLeagueCompleted);
            }
            base.InvokeAsync(this.onBeginGetLiveScoreByLeagueDelegate, new object[] {
                        ApiKey,
                        league}, this.onEndGetLiveScoreByLeagueDelegate, this.onGetLiveScoreByLeagueCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetTeam(string ApiKey, string teamName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTeam(ApiKey, teamName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetTeam(System.IAsyncResult result) {
            return base.Channel.EndGetTeam(result);
        }
        
        private System.IAsyncResult OnBeginGetTeam(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string teamName = ((string)(inValues[1]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetTeam(ApiKey, teamName, callback, asyncState);
        }
        
        private object[] OnEndGetTeam(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetTeam(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTeamCompleted(object state) {
            if ((this.GetTeamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTeamCompleted(this, new GetTeamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTeamAsync(string ApiKey, string teamName) {
            this.GetTeamAsync(ApiKey, teamName, null);
        }
        
        public void GetTeamAsync(string ApiKey, string teamName, object userState) {
            if ((this.onBeginGetTeamDelegate == null)) {
                this.onBeginGetTeamDelegate = new BeginOperationDelegate(this.OnBeginGetTeam);
            }
            if ((this.onEndGetTeamDelegate == null)) {
                this.onEndGetTeamDelegate = new EndOperationDelegate(this.OnEndGetTeam);
            }
            if ((this.onGetTeamCompletedDelegate == null)) {
                this.onGetTeamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTeamCompleted);
            }
            base.InvokeAsync(this.onBeginGetTeamDelegate, new object[] {
                        ApiKey,
                        teamName}, this.onEndGetTeamDelegate, this.onGetTeamCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginGetOddsByFixtureMatchId(string ApiKey, string fixtureMatch_Id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOddsByFixtureMatchId(ApiKey, fixtureMatch_Id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Xml.Linq.XElement footbal.football.FootballDataSoap.EndGetOddsByFixtureMatchId(System.IAsyncResult result) {
            return base.Channel.EndGetOddsByFixtureMatchId(result);
        }
        
        private System.IAsyncResult OnBeginGetOddsByFixtureMatchId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            string fixtureMatch_Id = ((string)(inValues[1]));
            return ((footbal.football.FootballDataSoap)(this)).BeginGetOddsByFixtureMatchId(ApiKey, fixtureMatch_Id, callback, asyncState);
        }
        
        private object[] OnEndGetOddsByFixtureMatchId(System.IAsyncResult result) {
            System.Xml.Linq.XElement retVal = ((footbal.football.FootballDataSoap)(this)).EndGetOddsByFixtureMatchId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOddsByFixtureMatchIdCompleted(object state) {
            if ((this.GetOddsByFixtureMatchIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOddsByFixtureMatchIdCompleted(this, new GetOddsByFixtureMatchIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOddsByFixtureMatchIdAsync(string ApiKey, string fixtureMatch_Id) {
            this.GetOddsByFixtureMatchIdAsync(ApiKey, fixtureMatch_Id, null);
        }
        
        public void GetOddsByFixtureMatchIdAsync(string ApiKey, string fixtureMatch_Id, object userState) {
            if ((this.onBeginGetOddsByFixtureMatchIdDelegate == null)) {
                this.onBeginGetOddsByFixtureMatchIdDelegate = new BeginOperationDelegate(this.OnBeginGetOddsByFixtureMatchId);
            }
            if ((this.onEndGetOddsByFixtureMatchIdDelegate == null)) {
                this.onEndGetOddsByFixtureMatchIdDelegate = new EndOperationDelegate(this.OnEndGetOddsByFixtureMatchId);
            }
            if ((this.onGetOddsByFixtureMatchIdCompletedDelegate == null)) {
                this.onGetOddsByFixtureMatchIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOddsByFixtureMatchIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetOddsByFixtureMatchIdDelegate, new object[] {
                        ApiKey,
                        fixtureMatch_Id}, this.onEndGetOddsByFixtureMatchIdDelegate, this.onGetOddsByFixtureMatchIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.football.FootballDataSoap.BeginCheckApiKey(string ApiKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckApiKey(ApiKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string footbal.football.FootballDataSoap.EndCheckApiKey(System.IAsyncResult result) {
            return base.Channel.EndCheckApiKey(result);
        }
        
        private System.IAsyncResult OnBeginCheckApiKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ApiKey = ((string)(inValues[0]));
            return ((footbal.football.FootballDataSoap)(this)).BeginCheckApiKey(ApiKey, callback, asyncState);
        }
        
        private object[] OnEndCheckApiKey(System.IAsyncResult result) {
            string retVal = ((footbal.football.FootballDataSoap)(this)).EndCheckApiKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckApiKeyCompleted(object state) {
            if ((this.CheckApiKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckApiKeyCompleted(this, new CheckApiKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckApiKeyAsync(string ApiKey) {
            this.CheckApiKeyAsync(ApiKey, null);
        }
        
        public void CheckApiKeyAsync(string ApiKey, object userState) {
            if ((this.onBeginCheckApiKeyDelegate == null)) {
                this.onBeginCheckApiKeyDelegate = new BeginOperationDelegate(this.OnBeginCheckApiKey);
            }
            if ((this.onEndCheckApiKeyDelegate == null)) {
                this.onEndCheckApiKeyDelegate = new EndOperationDelegate(this.OnEndCheckApiKey);
            }
            if ((this.onCheckApiKeyCompletedDelegate == null)) {
                this.onCheckApiKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckApiKeyCompleted);
            }
            base.InvokeAsync(this.onBeginCheckApiKeyDelegate, new object[] {
                        ApiKey}, this.onEndCheckApiKeyDelegate, this.onCheckApiKeyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override footbal.football.FootballDataSoap CreateChannel() {
            return new FootballDataSoapClientChannel(this);
        }
        
        private class FootballDataSoapClientChannel : ChannelBase<footbal.football.FootballDataSoap>, footbal.football.FootballDataSoap {
            
            public FootballDataSoapClientChannel(System.ServiceModel.ClientBase<footbal.football.FootballDataSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetHistoricMatchesByTeamAndDateInterval(string ApiKey, string teamId, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = ApiKey;
                _args[1] = teamId;
                _args[2] = startDateString;
                _args[3] = endDateString;
                System.IAsyncResult _result = base.BeginInvoke("GetHistoricMatchesByTeamAndDateInterval", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetHistoricMatchesByTeamAndDateInterval(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetHistoricMatchesByTeamAndDateInterval", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateDynamicIp(string ApiKey, string email, string newIp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = ApiKey;
                _args[1] = email;
                _args[2] = newIp;
                System.IAsyncResult _result = base.BeginInvoke("UpdateDynamicIp", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndUpdateDynamicIp(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("UpdateDynamicIp", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFixturesByDateIntervalAndTeam(string ApiKey, string startDateString, string endDateString, string teamId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = ApiKey;
                _args[1] = startDateString;
                _args[2] = endDateString;
                _args[3] = teamId;
                System.IAsyncResult _result = base.BeginInvoke("GetFixturesByDateIntervalAndTeam", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetFixturesByDateIntervalAndTeam(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetFixturesByDateIntervalAndTeam", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFixturesByLeagueAndSeason(string ApiKey, string seasonDateString, string league, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = ApiKey;
                _args[1] = seasonDateString;
                _args[2] = league;
                System.IAsyncResult _result = base.BeginInvoke("GetFixturesByLeagueAndSeason", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetFixturesByLeagueAndSeason(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetFixturesByLeagueAndSeason", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHistoricMatchesByID(string ApiKey, int Id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = ApiKey;
                _args[1] = Id;
                System.IAsyncResult _result = base.BeginInvoke("GetHistoricMatchesByID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetHistoricMatchesByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetHistoricMatchesByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHistoricMatchesByFixtureMatchID(string ApiKey, int Id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = ApiKey;
                _args[1] = Id;
                System.IAsyncResult _result = base.BeginInvoke("GetHistoricMatchesByFixtureMatchID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetHistoricMatchesByFixtureMatchID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetHistoricMatchesByFixtureMatchID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHistoricMatchesByLeagueAndDateInterval(string ApiKey, string league, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = ApiKey;
                _args[1] = league;
                _args[2] = startDateString;
                _args[3] = endDateString;
                System.IAsyncResult _result = base.BeginInvoke("GetHistoricMatchesByLeagueAndDateInterval", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetHistoricMatchesByLeagueAndDateInterval(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetHistoricMatchesByLeagueAndDateInterval", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHistoricMatchesByLeagueAndSeason(string ApiKey, string league, string seasonDateString, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = ApiKey;
                _args[1] = league;
                _args[2] = seasonDateString;
                System.IAsyncResult _result = base.BeginInvoke("GetHistoricMatchesByLeagueAndSeason", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetHistoricMatchesByLeagueAndSeason(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetHistoricMatchesByLeagueAndSeason", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHistoricMatchesByTeamsAndDateInterval(string ApiKey, string team1Id, string team2Id, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = ApiKey;
                _args[1] = team1Id;
                _args[2] = team2Id;
                _args[3] = startDateString;
                _args[4] = endDateString;
                System.IAsyncResult _result = base.BeginInvoke("GetHistoricMatchesByTeamsAndDateInterval", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetHistoricMatchesByTeamsAndDateInterval(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetHistoricMatchesByTeamsAndDateInterval", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFixturesByDateInterval(string ApiKey, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = ApiKey;
                _args[1] = startDateString;
                _args[2] = endDateString;
                System.IAsyncResult _result = base.BeginInvoke("GetFixturesByDateInterval", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetFixturesByDateInterval(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetFixturesByDateInterval", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFixturesByDateIntervalAndLeague(string league, string ApiKey, string startDateString, string endDateString, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = league;
                _args[1] = ApiKey;
                _args[2] = startDateString;
                _args[3] = endDateString;
                System.IAsyncResult _result = base.BeginInvoke("GetFixturesByDateIntervalAndLeague", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetFixturesByDateIntervalAndLeague(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetFixturesByDateIntervalAndLeague", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllTeams(string ApiKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ApiKey;
                System.IAsyncResult _result = base.BeginInvoke("GetAllTeams", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetAllTeams(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetAllTeams", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllLeagues(string ApiKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ApiKey;
                System.IAsyncResult _result = base.BeginInvoke("GetAllLeagues", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetAllLeagues(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetAllLeagues", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLeagueStandingsBySeason(string ApiKey, string league, string seasonDateString, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = ApiKey;
                _args[1] = league;
                _args[2] = seasonDateString;
                System.IAsyncResult _result = base.BeginInvoke("GetLeagueStandingsBySeason", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetLeagueStandingsBySeason(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetLeagueStandingsBySeason", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllTeamsByLeagueAndSeason(string ApiKey, string league, string seasonDateString, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = ApiKey;
                _args[1] = league;
                _args[2] = seasonDateString;
                System.IAsyncResult _result = base.BeginInvoke("GetAllTeamsByLeagueAndSeason", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetAllTeamsByLeagueAndSeason(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetAllTeamsByLeagueAndSeason", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetEarliestMatchDatePerLeague(string ApiKey, string league, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = ApiKey;
                _args[1] = league;
                System.IAsyncResult _result = base.BeginInvoke("GetEarliestMatchDatePerLeague", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetEarliestMatchDatePerLeague(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetEarliestMatchDatePerLeague", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLiveScore(string ApiKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ApiKey;
                System.IAsyncResult _result = base.BeginInvoke("GetLiveScore", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetLiveScore(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetLiveScore", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLiveScoreByLeague(string ApiKey, string league, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = ApiKey;
                _args[1] = league;
                System.IAsyncResult _result = base.BeginInvoke("GetLiveScoreByLeague", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetLiveScoreByLeague(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetLiveScoreByLeague", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTeam(string ApiKey, string teamName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = ApiKey;
                _args[1] = teamName;
                System.IAsyncResult _result = base.BeginInvoke("GetTeam", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetTeam(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetTeam", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOddsByFixtureMatchId(string ApiKey, string fixtureMatch_Id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = ApiKey;
                _args[1] = fixtureMatch_Id;
                System.IAsyncResult _result = base.BeginInvoke("GetOddsByFixtureMatchId", _args, callback, asyncState);
                return _result;
            }
            
            public System.Xml.Linq.XElement EndGetOddsByFixtureMatchId(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Xml.Linq.XElement _result = ((System.Xml.Linq.XElement)(base.EndInvoke("GetOddsByFixtureMatchId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCheckApiKey(string ApiKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ApiKey;
                System.IAsyncResult _result = base.BeginInvoke("CheckApiKey", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCheckApiKey(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CheckApiKey", _args, result)));
                return _result;
            }
        }
    }
}
