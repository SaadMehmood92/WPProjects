//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace footbal.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://xmlme.com/WebServices", ConfigurationName="ServiceReference1.DotnetDailyFactSoap")]
    public interface DotnetDailyFactSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xmlme.com/WebServices/GetDotnetDailyFact", ReplyAction="*")]
        System.IAsyncResult BeginGetDotnetDailyFact(footbal.ServiceReference1.GetDotnetDailyFactRequest request, System.AsyncCallback callback, object asyncState);
        
        footbal.ServiceReference1.GetDotnetDailyFactResponse EndGetDotnetDailyFact(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetDotnetDailyFactRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetDotnetDailyFact", Namespace="http://xmlme.com/WebServices", Order=0)]
        public footbal.ServiceReference1.GetDotnetDailyFactRequestBody Body;
        
        public GetDotnetDailyFactRequest() {
        }
        
        public GetDotnetDailyFactRequest(footbal.ServiceReference1.GetDotnetDailyFactRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute()]
    public partial class GetDotnetDailyFactRequestBody {
        
        public GetDotnetDailyFactRequestBody() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetDotnetDailyFactResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetDotnetDailyFactResponse", Namespace="http://xmlme.com/WebServices", Order=0)]
        public footbal.ServiceReference1.GetDotnetDailyFactResponseBody Body;
        
        public GetDotnetDailyFactResponse() {
        }
        
        public GetDotnetDailyFactResponse(footbal.ServiceReference1.GetDotnetDailyFactResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://xmlme.com/WebServices")]
    public partial class GetDotnetDailyFactResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string GetDotnetDailyFactResult;
        
        public GetDotnetDailyFactResponseBody() {
        }
        
        public GetDotnetDailyFactResponseBody(string GetDotnetDailyFactResult) {
            this.GetDotnetDailyFactResult = GetDotnetDailyFactResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DotnetDailyFactSoapChannel : footbal.ServiceReference1.DotnetDailyFactSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDotnetDailyFactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDotnetDailyFactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DotnetDailyFactSoapClient : System.ServiceModel.ClientBase<footbal.ServiceReference1.DotnetDailyFactSoap>, footbal.ServiceReference1.DotnetDailyFactSoap {
        
        private BeginOperationDelegate onBeginGetDotnetDailyFactDelegate;
        
        private EndOperationDelegate onEndGetDotnetDailyFactDelegate;
        
        private System.Threading.SendOrPostCallback onGetDotnetDailyFactCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DotnetDailyFactSoapClient() {
        }
        
        public DotnetDailyFactSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DotnetDailyFactSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DotnetDailyFactSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DotnetDailyFactSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetDotnetDailyFactCompletedEventArgs> GetDotnetDailyFactCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult footbal.ServiceReference1.DotnetDailyFactSoap.BeginGetDotnetDailyFact(footbal.ServiceReference1.GetDotnetDailyFactRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDotnetDailyFact(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetDotnetDailyFact(System.AsyncCallback callback, object asyncState) {
            footbal.ServiceReference1.GetDotnetDailyFactRequest inValue = new footbal.ServiceReference1.GetDotnetDailyFactRequest();
            inValue.Body = new footbal.ServiceReference1.GetDotnetDailyFactRequestBody();
            return ((footbal.ServiceReference1.DotnetDailyFactSoap)(this)).BeginGetDotnetDailyFact(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        footbal.ServiceReference1.GetDotnetDailyFactResponse footbal.ServiceReference1.DotnetDailyFactSoap.EndGetDotnetDailyFact(System.IAsyncResult result) {
            return base.Channel.EndGetDotnetDailyFact(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndGetDotnetDailyFact(System.IAsyncResult result) {
            footbal.ServiceReference1.GetDotnetDailyFactResponse retVal = ((footbal.ServiceReference1.DotnetDailyFactSoap)(this)).EndGetDotnetDailyFact(result);
            return retVal.Body.GetDotnetDailyFactResult;
        }
        
        private System.IAsyncResult OnBeginGetDotnetDailyFact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDotnetDailyFact(callback, asyncState);
        }
        
        private object[] OnEndGetDotnetDailyFact(System.IAsyncResult result) {
            string retVal = this.EndGetDotnetDailyFact(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDotnetDailyFactCompleted(object state) {
            if ((this.GetDotnetDailyFactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDotnetDailyFactCompleted(this, new GetDotnetDailyFactCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDotnetDailyFactAsync() {
            this.GetDotnetDailyFactAsync(null);
        }
        
        public void GetDotnetDailyFactAsync(object userState) {
            if ((this.onBeginGetDotnetDailyFactDelegate == null)) {
                this.onBeginGetDotnetDailyFactDelegate = new BeginOperationDelegate(this.OnBeginGetDotnetDailyFact);
            }
            if ((this.onEndGetDotnetDailyFactDelegate == null)) {
                this.onEndGetDotnetDailyFactDelegate = new EndOperationDelegate(this.OnEndGetDotnetDailyFact);
            }
            if ((this.onGetDotnetDailyFactCompletedDelegate == null)) {
                this.onGetDotnetDailyFactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDotnetDailyFactCompleted);
            }
            base.InvokeAsync(this.onBeginGetDotnetDailyFactDelegate, null, this.onEndGetDotnetDailyFactDelegate, this.onGetDotnetDailyFactCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override footbal.ServiceReference1.DotnetDailyFactSoap CreateChannel() {
            return new DotnetDailyFactSoapClientChannel(this);
        }
        
        private class DotnetDailyFactSoapClientChannel : ChannelBase<footbal.ServiceReference1.DotnetDailyFactSoap>, footbal.ServiceReference1.DotnetDailyFactSoap {
            
            public DotnetDailyFactSoapClientChannel(System.ServiceModel.ClientBase<footbal.ServiceReference1.DotnetDailyFactSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetDotnetDailyFact(footbal.ServiceReference1.GetDotnetDailyFactRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetDotnetDailyFact", _args, callback, asyncState);
                return _result;
            }
            
            public footbal.ServiceReference1.GetDotnetDailyFactResponse EndGetDotnetDailyFact(System.IAsyncResult result) {
                object[] _args = new object[0];
                footbal.ServiceReference1.GetDotnetDailyFactResponse _result = ((footbal.ServiceReference1.GetDotnetDailyFactResponse)(base.EndInvoke("GetDotnetDailyFact", _args, result)));
                return _result;
            }
        }
    }
}
